bool isCyclicDFS(int node, int parent, unordered_map<int,bool>&visited, unordered_map<int,list<int>>&adj){

visited[node]=true;
 for(auto neighbour:adj[node]){
  if(!visited[neighbour]){
   if(isCyclicDFS(neighbour, node, visited, adj){
   return true;
   }
   else if(neighbour!=parent){
   return true;
   }
  }
  return false;
 }
}

string cycleDetection(vector<vector<int>>&edges, int n, int m){

//creation of adj list
 void prepadjList(unordered_map<int,set<int>>&adjList, vector<pair<int>>&edges){
  int u= edges[i].first;
  int v= edges[i].second;
   
   adjList[u].insert(v);
   adjList[v].insert(u);
  }
  
  unorderd_map<int,bool>visited;
  
   for(int i=0; i<n; i++){
    if(!visited[i]){
     if(isCyclicDFS(i,-1,visited,adj);
      return true;
    }
   }
       return false;
 }
