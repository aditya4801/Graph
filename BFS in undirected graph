void prepareAdjList(unordered_map<int, set<int>>&adjList, vector<pair<int,int>>&edges){
for(int i=0; i<edges.size(); i++){

int u=edges[i].first;
int v= edges[i].second;

//creating adjlist
adjList[u].push_back(v);
adjList[v].push_back(u);
 }
}

void bfs(unordered_map<int, set<int>>&adjList, unordered_map<int,bool>&visited, vector<int>&ans, int node){

queue<int>q;
q.push_back(node);
visited[node]=0;

while(!q.empty()){

int frontNode= q.front();
q.pop();

ans.push_back(frontNode);

//traverse through all neighbours of front node

for(auto i:adjList[frontNode]){
if(!visited[i]){
q.push(frontNode);
visited[i]=1;
}
}

vector<int>BFS(int vertex, vector<pair<int,int>>edges){
unordered_map(int , set<int >>adjList;
vetor<int>ans;
unordered_map<int,bool>visited;

preparedAdjList(adjList,edges);

for(int i=0; i<n; i++){
 if(!visited[i]){
 
  bfs(adjList, visited, ans, i);
  }
 }
 return ans;
  }
