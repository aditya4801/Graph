vector<int>topologicalSort(vector<vector<int>>&edges, int v, int e){

//create adj list

 unordered_map<int, list<int>>adj;
 
   for(int i=0; i<e; i++){
   int u= adj[i][0];
   int v= adj[i][1];
   
   adj[u].push_back(v);
   }
   
   //find all inorders
   
   vector<int>indegree(v);
    for(auto i:adj){
      for(auto j: i.second){
        indegree[j]++;
        } 
      }
      
      //Elems with 0 indegree are pushed into queue
      
      queue<int>q;
      for(int i=0; i<v; i++){
      if(indegree[i]==0)
      q.push_back(i);
      }
      
      //do bfs
      
      vector<int>ans;
        while(!q.empty()){
         int front= q.front();
          q.pop();
          
          //ans store
          
          ans.push_back(front);
          
          //neighbour indegree update
          
          for(auto neighbour: adj[front]){
            indegree[neighbour]--;
             if(indegree[neighbour]==0)
              q.push_back(neighbour);
          }
        }
        
        return ans;
 }
