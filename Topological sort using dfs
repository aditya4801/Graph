void topoSort(int node, vector<int>&visited, stack<int>&s, unordered_map<int,list<int>&adj){

//dfs logic

 visited[node];
 for(auto neighbours: adj[node]){
 if(!visited[neighbours])
  topoSort(neihgbours, visited, s , adj)
  }
  //after returning from function call push the returned element into stack
  s.push_back(node);
 }
 
 vector<int>topologicalSort(vector<vector<int>>&edges, int v, int e){
 
 //create adj list
 
  unordered_map<int, list<int>>adj;
   for(int i=0; i<e;i++){
   int u= edges[i][0];
   int v= edges[i][1];
   
   adj[u].push_back(v);
   }
   
   //call dfs for topological sort func
   
   vector<bool>visited;
   stack<int>s;
   
    for(int i=0; i<v;i++){
    if(!visited){
    topoSort(i, visited, s,adj);
 }   
    //store elems in stack in ans
    
    vector<int>ans;
    
    while(!s.empty()){
    
    ans.push(s.top());
    s.pop();
     }
     return ans;
     }
