void dfs(int node, unordered_map<int,bool>&visited, unordered_map<int,list<int>>&adj, vector<int>&component){

//ans store

component.push_back(node);
 visited[node]=true;
 
  for(auto i: adj[node]){
  if(!visited[i]){
  dfs(i,visited, adj, component)
   }
  }
 }
 
 vector<vector<int>>depthFirstSearch(int V, int E, vector<vector<int>>&edges){
 // adj list 
 
 void prepadjList(unordered_map<int,set<int>>&adjList, vector<pair<int>>&edges){
  int u= edges[i].first;
  int v= edges[i].second;
   
   adjList[u].insert(v);
   adjList[v].insert(u);
  }
 
  vector<vector<int>>ans;
  unordered_map<int,bool>visited;
   
   for(int i=0; i<V;i++){
   if(!visited[i]){
     vector<int>component;
     dfs(i, visited, adj, component);
      ans.push_back(component);
     }
   }
   return ans;
 }
